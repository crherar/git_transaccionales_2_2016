#include <stdlib.h>
#include <sqlca.h>

EXEC SQL INCLUDE sqlca;
//#include EXEC SQL INCLUDE SQLCA;
#define ASSERT(ptr) if(sqlca.sqlcode != 0){free(ptr);ptr=NULL;}

EXEC SQL BEGIN DECLARE SECTION;
EXEC SQL INCLUDE modelo.h;
EXEC SQL END DECLARE SECTION;

int get_id_objeto(char *nombre_objeto)
{
EXEC SQL BEGIN DECLARE SECTION;
int  SQL_output;
char SQL_nombre_obj[15];

EXEC SQL END DECLARE SECTION;

//SQL_output = (Usuario*) malloc(sizeof(Usuario));
//memset(SQL_output, 0, sizeof(Usuario));
strcpy(SQL_nombre_obj,nombre_objeto);

EXEC SQL SELECT id INTO :SQL_output FROM objetos WHERE nombre = RTRIM(:SQL_nombre_obj);
db_commit();

ASSERT(SQL_output);
return SQL_output;
}


Objeto *insertar_objeto(int id_usuario_dueno,char *nombre_objeto)
{
EXEC SQL BEGIN DECLARE SECTION;
Objeto  *SQL_output;
int  SQL_id_usuario_dueno;
char SQL_nombre_obj[15];

EXEC SQL END DECLARE SECTION;

strcpy(SQL_nombre_obj,nombre_objeto);
SQL_id_usuario_dueno = id_usuario_dueno;

SQL_output = (Objeto*) malloc(sizeof(Objeto));
memset(SQL_output, 0, sizeof(Objeto));

EXEC SQL INSERT INTO objetos(nombre,id_usuario_dueno) VALUES(RTRIM(:SQL_nombre_obj),:SQL_id_usuario_dueno);
printf(sqlca.sqlerrm.sqlerrmc );
printf("\n");
SQL_output->verificador_error = sqlca.sqlcode;
	//printf("antes de hacer commit \n");

db_commit();
ASSERT(SQL_output);
return SQL_output;
}

Objeto *actualizar_objeto(char *nombre_objeto,int id_objeto)
{
    EXEC SQL BEGIN DECLARE SECTION;
    Objeto  *SQL_output;
    //int  SQL_id_usuario_dueno;
    char SQL_nombre_objeto[15];
    int SQL_id_objeto;
    EXEC SQL END DECLARE SECTION;

    strcpy(SQL_nombre_objeto,nombre_objeto);
    //SQL_id_usuario_dueno = id_usuario_dueno;
    SQL_id_objeto = id_objeto;
    SQL_output = (Objeto*) malloc(sizeof(Objeto));
    memset(SQL_output, 0, sizeof(Objeto));

    EXEC SQL UPDATE  objetos SET

    nombre = RTRIM(:SQL_nombre_objeto)
    WHERE objetos.id = :SQL_id_objeto;

    printf(sqlca.sqlerrm.sqlerrmc );
    printf("\n");
    SQL_output->verificador_error = sqlca.sqlcode;
    	//printf("antes de hacer commit \n");

    db_commit();
    ASSERT(SQL_output);
    return SQL_output;
}


MisObjetos *get_listado_objetos_tabla(int id_usuario_dueno)//debe venir por parametro la id del usuario
{
EXEC SQL BEGIN DECLARE SECTION;
MisObjetos *SQL_output;
int SQL_pagina;
int SQL_count;
int  SQL_id_usuario_dueno;
//char SQL_nombre_obj[15];

EXEC SQL END DECLARE SECTION;

SQL_id_usuario_dueno = id_usuario_dueno;
printf("1 \n");

EXEC SQL SELECT count(*) INTO :SQL_count from objetos where id_usuario_dueno = :SQL_id_usuario_dueno;
SQL_output = (MisObjetos*) malloc(sizeof(MisObjetos) * (SQL_count + 1));
if(SQL_count == 0)
{
strcpy(SQL_output->listado,"02");
 }
 else
 {
//EXEC SQL SELECT json_agg(objetos.*) as datos INTO :SQL_output FROM misPrestamos;
//EXEC SQL SELECT json_agg(objs.*) as datos INTO :SQL_output from (select id,nombre from objetos where id_usuario_dueno = :SQL_id_usuario_dueno) as objs;
//memset(SQL_output,'\0',sizeof SQL_output);

EXEC SQL SELECT string_agg(concat(cast(id as text),',',
  nombre),'|') as datos INTO :SQL_output->listado
  FROM objetos where id_usuario_dueno = :SQL_id_usuario_dueno;


printf(sqlca.sqlerrm.sqlerrmc );
printf("\n");
printf("2 \n");
SQL_output->verificador_error = sqlca.sqlcode;
db_commit();
//printf("%s \n",SQL_output);
printf("3 \n");
//ASSERT(SQL_output);
}
return SQL_output;
}

/*
char *get_listado_objetos_tabla(int id_usuario_dueno)//debe venir por parametro la id del usuario
{
EXEC SQL BEGIN DECLARE SECTION;
char SQL_output[2000];
int SQL_pagina;
int SQL_count;
int  SQL_id_usuario_dueno;
//char SQL_nombre_obj[15];

EXEC SQL END DECLARE SECTION;

SQL_id_usuario_dueno = id_usuario_dueno;
printf("1 \n");

EXEC SQL SELECT count(*) INTO :SQL_count from objetos where id_usuario_dueno = :SQL_id_usuario_dueno;
SQL_output = (MisObjetos*) malloc(sizeof(MisObjetos) * (SQL_count + 1));
if(SQL_count == 0)
{
 strcpy(SQL_output,"02");
 }
 else
 {
//EXEC SQL SELECT json_agg(objetos.*) as datos INTO :SQL_output FROM misPrestamos;
//EXEC SQL SELECT json_agg(objs.*) as datos INTO :SQL_output from (select id,nombre from objetos where id_usuario_dueno = :SQL_id_usuario_dueno) as objs;
//memset(SQL_output,'\0',sizeof SQL_output);

EXEC SQL SELECT string_agg(concat(cast(id as text),',',
  nombre),'|') as datos INTO :SQL_output
  from objetos where id_usuario_dueno = :SQL_id_usuario_dueno;


printf(sqlca.sqlerrm.sqlerrmc );
printf("2 \n");
db_commit();
//printf("%s \n",SQL_output);
printf("3 \n");
//ASSERT(SQL_output);
}
return SQL_output;
}
*/

MisObjetos *get_listado_objetos_combobox(int id_usuario_dueno)//debe venir por parametro la id del usuario
{
EXEC SQL BEGIN DECLARE SECTION;
MisObjetos *SQL_output;
int SQL_pagina;
int SQL_count;
int  SQL_id_usuario_dueno;
//char SQL_nombre_obj[15];

EXEC SQL END DECLARE SECTION;

SQL_id_usuario_dueno = id_usuario_dueno;
printf("1 \n");

EXEC SQL SELECT count(*) INTO :SQL_count from objetos where id_usuario_dueno = :SQL_id_usuario_dueno;
SQL_output = (MisObjetos*) malloc(sizeof(MisObjetos) * (SQL_count + 1));
if(SQL_count == 0)
{
strcpy(SQL_output->listado,"02");
 }
 else
 {
//EXEC SQL SELECT json_agg(objetos.*) as datos INTO :SQL_output FROM misPrestamos;
//EXEC SQL SELECT json_agg(objs.*) as datos INTO :SQL_output from (select id,nombre from objetos where id_usuario_dueno = :SQL_id_usuario_dueno) as objs;
//memset(SQL_output,'\0',sizeof SQL_output);

EXEC SQL SELECT string_agg(nombre,',') as datos INTO :SQL_output->listado
  FROM objetos where id_usuario_dueno = :SQL_id_usuario_dueno;


printf(sqlca.sqlerrm.sqlerrmc );
printf("\n");
printf("2 \n");
SQL_output->verificador_error = sqlca.sqlcode;
db_commit();
//printf("%s \n",SQL_output);
printf("3 \n");
//ASSERT(SQL_output);
}
return SQL_output;
}

/*
char *get_listado_objetos_combobox(int id_usuario_dueno)//debe venir por parametro la id del usuario
{
EXEC SQL BEGIN DECLARE SECTION;
Objeto  *SQL_output;
int SQL_pagina;
int SQL_count;
int  SQL_id_usuario_dueno;
//char SQL_nombre_obj[15];

EXEC SQL END DECLARE SECTION;

SQL_id_usuario_dueno = id_usuario_dueno;
EXEC SQL SELECT COUNT(*) INTO :SQL_count FROM objetos where id_usuario_dueno = :SQL_id_usuario_dueno;

if(SQL_count == 0) return "no hay datos";

SQL_output = (Objeto*) malloc(sizeof(Objeto) * (SQL_count + 1));
//SQL_output[SQL_count].SQL_CODE = 0;
//memset(SQL_output, 0, sizeof(Objeto));


EXEC SQL DECLARE RESULT_SET_CB CURSOR FOR SELECT nombre
FROM objetos where id_usuario_dueno = :SQL_id_usuario_dueno  ORDER BY nombre asc;
EXEC SQL OPEN RESULT_SET_CB;

int resultset_pos = 0;

int tamanio = 0;
tamanio = (SQL_count*20)+1;
printf("antes del malloc \n");
  char *datos;
  datos = (char *)malloc(tamanio * sizeof(char));
  memset(datos,'\0',sizeof datos);
printf("despues del malloc \n");


//EXEC SQL SELECT nombre INTO :SQL_output->nombre FROM objetos;

char nombre_obj[15] = "";
//char datos[200] = "";
printf("antes del while \n");
while(!sqlca.sqlcode && resultset_pos < SQL_count){
	EXEC SQL FETCH NEXT FROM RESULT_SET_CB INTO :SQL_output[resultset_pos].nombre;
        printf("nombre: %s \n",SQL_output[resultset_pos].nombre);

        strcpy(nombre_obj,SQL_output[resultset_pos].nombre);
        printf("1\n");
        strcat(nombre_obj,"-");
        printf("2\n");
        strcat(datos,nombre_obj);
        printf("3\n");


	}

EXEC SQL CLOSE RESULT_SET_CB;
printf("despues del while \n");

printf(sqlca.sqlerrm.sqlerrmc );
printf("\n");
SQL_output->verificador_error = sqlca.sqlcode;
	//printf("antes de hacer commit \n");

db_commit();
ASSERT(SQL_output);
printf("datos en el sql %s \n",datos);
printf("largo datos en el sql %d \n",strlen(datos));
return datos;
}
*/


char *get_listado_objetos(int pagina)//debe venir por parametro la id del usuario
{
EXEC SQL BEGIN DECLARE SECTION;
Objeto  *SQL_output;
int SQL_pagina;
int SQL_count;
//int  SQL_id_usuario_dueno;
//char SQL_nombre_obj[15];

EXEC SQL END DECLARE SECTION;

SQL_pagina = (pagina-1)*10;
EXEC SQL SELECT COUNT(*) INTO :SQL_count FROM objetos limit 10 offset :SQL_pagina;

if(SQL_count == 0) return "no hay datos";

SQL_output = (Objeto*) malloc(sizeof(Objeto) * (SQL_count + 1));
//SQL_output[SQL_count].SQL_CODE = 0;
//memset(SQL_output, 0, sizeof(Objeto));


EXEC SQL DECLARE RESULT_SET CURSOR FOR SELECT concat(id, ' - ', nombre)
FROM objetos  ORDER BY id limit 10 offset :SQL_pagina;
EXEC SQL OPEN RESULT_SET;

int resultset_pos = 0;

//EXEC SQL SELECT nombre INTO :SQL_output->nombre FROM objetos;

char nombre_obj[15] = "";
char datos[200] = "";
printf("antes del while \n");
while(!sqlca.sqlcode && resultset_pos < SQL_count){
	EXEC SQL FETCH NEXT FROM RESULT_SET INTO :SQL_output[resultset_pos].nombre;
        printf("nombre: %s \n",SQL_output[resultset_pos].nombre);
        int tamanio = strlen(SQL_output[resultset_pos].nombre);
        if(tamanio <=15)
        {

         printf("tamanio: %d \n",tamanio);
         int num_espacios = 15 - tamanio;
         printf("num_espacios: %d \n",num_espacios);
         char espacios[15 - tamanio];
         printf("largo espacios: %d \n",strlen(espacios));

         strcpy(nombre_obj, SQL_output[resultset_pos].nombre);
         int i;
         for(i = 0;i<num_espacios;i++){
          strcat(nombre_obj," ");
         }
         strcat(datos,nombre_obj);
         }

	}

EXEC SQL CLOSE RESULT_SET;
printf("despues del while \n");

printf(sqlca.sqlerrm.sqlerrmc );
printf("\n");
SQL_output->verificador_error = sqlca.sqlcode;
	//printf("antes de hacer commit \n");

db_commit();
ASSERT(SQL_output);
printf("datos en el sql %s \n",datos);
printf("largo datos en el sql %d \n",strlen(datos));
return datos;
}

int borrar_objeto(int id_objeto)
{

    EXEC SQL BEGIN DECLARE SECTION;

    int  SQL_id_objeto;

    EXEC SQL END DECLARE SECTION;

    SQL_id_objeto = id_objeto;

    EXEC SQL DELETE FROM objetos WHERE objetos.id = :SQL_id_objeto;

    printf("\n\n Sqlca Sqlcode: %d\n\n", sqlca.sqlcode);

    printf(sqlca.sqlerrm.sqlerrmc );

    int resp;
    resp = sqlca.sqlcode;

    db_commit();

    return resp;
}



char *get_nombre_objeto_por_id(int id)
{
    EXEC SQL BEGIN DECLARE SECTION;
    char *SQL_output;
    int SQL_id;
    EXEC SQL END DECLARE SECTION;
    SQL_id = id;

    memset(SQL_output,' ',strlen(SQL_output));

    EXEC SQL SELECT objetos.nombre INTO :SQL_output FROM objetos WHERE objetos.id = :SQL_id;

   // printf("despues de select nombre objeto \n");

    db_commit();

    ASSERT(SQL_output);
    return SQL_output;

}

char *get_objeto_por_id(int id_objeto)
{
    EXEC SQL BEGIN DECLARE SECTION;
    char SQL_output[25];
    int SQL_id_objeto;
    EXEC SQL END DECLARE SECTION;

    SQL_id_objeto = id_objeto;

    //SQL_output = (char*)malloc(sizeof(SLQ_output));
    //memset(SQL_output,' ',strlen(SQL_output));
    printf("1 \n");
    EXEC SQL SELECT
    CONCAT(objetos.id,'-',objetos.nombre,'-',
    objetos.id_usuario_dueno) as objeto INTO :SQL_output
    FROM objetos WHERE objetos.id = :SQL_id_objeto;
    //printf(SQL_output);
    printf("\n");
    printf(sqlca.sqlerrm.sqlerrmc );
    printf("2 \n");
   // printf("despues de select nombre objeto \n");
    printf("3 \n");
    db_commit();
    printf("4 \n");
    //ASSERT(SQL_output);
    printf("5 \n");
    return SQL_output;

}


Objeto *get_nombre_objeto_por_id2(int id)
{
    EXEC SQL BEGIN DECLARE SECTION;
    Objeto *SQL_output;
    int SQL_id;
    EXEC SQL END DECLARE SECTION;
    SQL_id = id;
    SQL_output = (Objeto*) malloc(sizeof(Objeto));
    memset(SQL_output,' ',strlen(SQL_output));
   // printf("antes de select nombre objeto \n");

    EXEC SQL SELECT objetos.id,objetos.nombre INTO :SQL_output->id,:SQL_output->nombre FROM objetos WHERE objetos.id = :SQL_id;

   // printf("despues de select nombre objeto \n");

    SQL_output->verificador_error = sqlca.sqlcode;
    db_commit();

    ASSERT(SQL_output);
    return SQL_output;

}

int validar_registro_objeto(char *nombre_objeto, int id_dueno_objeto)
{
    EXEC SQL BEGIN DECLARE SECTION;
    int SQL_output;
    char SQL_nombre_objeto[15];
    int SQL_id_dueno_objeto;
    EXEC SQL END DECLARE SECTION;
    strcpy(SQL_nombre_objeto,nombre_objeto);
    SQL_id_dueno_objeto = id_dueno_objeto;
   // memset(SQL_output,' ',strlen(SQL_output));
   // printf("antes de select nombre objeto \n");
    EXEC SQL SELECT count(*) INTO :SQL_output FROM objetos WHERE objetos.nombre = :SQL_nombre_objeto
    and objetos.id_usuario_dueno = :SQL_id_dueno_objeto;

   // printf("despues de select nombre objeto \n");
    //SQL_output->verificador_error = sqlca.sqlcode;

    db_commit();

    ASSERT(SQL_output);
    return SQL_output;
}
