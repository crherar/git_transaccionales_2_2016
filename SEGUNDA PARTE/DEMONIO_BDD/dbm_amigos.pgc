#include <stdlib.h>
#include <sqlca.h>

EXEC SQL INCLUDE sqlca;
//#include EXEC SQL INCLUDE SQLCA;
#define ASSERT(ptr) if(sqlca.sqlcode != 0){free(ptr);ptr=NULL;}

EXEC SQL BEGIN DECLARE SECTION;
EXEC SQL INCLUDE modelo.h;
EXEC SQL END DECLARE SECTION;



Amigo *insertar_amigos(int id_usuario_logueado,int id_amigo)
{
EXEC SQL BEGIN DECLARE SECTION;
Amigo  *SQL_output;
int  SQL_id_usuario_logueado;
int SQL_id_amigo;
EXEC SQL END DECLARE SECTION;

SQL_id_usuario_logueado = id_usuario_logueado;
SQL_id_amigo = id_amigo;


SQL_output = (Amigo*) malloc(sizeof(Amigo));
memset(SQL_output,0,sizeof(Amigo));

EXEC SQL INSERT INTO amigos(amigo_1,amigo_2) VALUES(:SQL_id_usuario_logueado,:SQL_id_amigo);
db_commit();
EXEC SQL INSERT INTO amigos(amigo_1,amigo_2) VALUES(:SQL_id_amigo,:SQL_id_usuario_logueado);

SQL_output->verificador_error = sqlca.sqlcode;

db_commit();
ASSERT(SQL_output);
return SQL_output;

}

Amigo *actualizar_amigos(int id_usuario_logueado,int id_amigo,int id_amistad)
{
EXEC SQL BEGIN DECLARE SECTION;
Amigo  *SQL_output;
int  SQL_id_usuario_logueado;
int SQL_id_amigo;
int SQL_id_amistad;
EXEC SQL END DECLARE SECTION;

SQL_id_usuario_logueado = id_usuario_logueado;
SQL_id_amigo = id_amigo;
SQL_id_amistad = id_amistad;

SQL_output = (Amigo*) malloc(sizeof(Amigo));
memset(SQL_output,0,sizeof(Amigo));

EXEC SQL UPDATE amigos SET
amigo_1 = :SQL_id_usuario_logueado,
amigo_2 = :SQL_id_amigo
WHERE amigos.id = :SQL_id_amistad;

SQL_output->verificador_error = sqlca.sqlcode;

db_commit();
ASSERT(SQL_output);
return SQL_output;

}

int eliminar_amistad(id_amistad)
{
  EXEC SQL BEGIN DECLARE SECTION;

  int  SQL_id_amistad;

  EXEC SQL END DECLARE SECTION;

  SQL_id_amistad = id_amistad;

  EXEC SQL DELETE FROM amigos WHERE amigos.id = :SQL_id_amistad;

  printf("\n\n Sqlca Sqlcode: %d\n\n", sqlca.sqlcode);

  printf(sqlca.sqlerrm.sqlerrmc );

  int resp;
  resp = sqlca.sqlcode;

  db_commit();

  return resp;
}

char *get_mis_amigos(int id_usuario_logueado)
{
  EXEC SQL BEGIN DECLARE SECTION;
  Misamigos *SQL_output;
  int SQL_id_usuario_logueado;
  int SQL_count;
  EXEC SQL END DECLARE SECTION;

  SQL_id_usuario_logueado = id_usuario_logueado;

  EXEC SQL SELECT COUNT(*) INTO :SQL_count FROM misAmigos WHERE amigo_1 = :SQL_id_usuario_logueado;
  if(SQL_count == 0) return "no hay datos";
  printf("SQL_count: %d \n",SQL_count);
  SQL_output = (Misamigos*) malloc(sizeof(Misamigos) * (SQL_count + 1));

  EXEC SQL DECLARE RESULT_SET CURSOR FOR SELECT emailamigo
  FROM misamigos  ORDER BY emailamigo;
  EXEC SQL OPEN RESULT_SET;

  int resultset_pos = 0;

  int tamanio = 0;
  tamanio = (SQL_count*40)+1;
  printf("antes del malloc \n");
    char *datos;
    datos = (char *)malloc(tamanio * sizeof(char));
    memset(datos,'\0',sizeof datos);
 printf("despues del malloc \n");
  char email_amigo[40] = "";

  printf("antes del while \n");
  printf(sqlca.sqlcode );
  printf("\n");
  while(!sqlca.sqlcode && resultset_pos < SQL_count){
  	printf("inicio del while \n");
    printf("dlskldkls \n");
    EXEC SQL FETCH NEXT FROM RESULT_SET INTO :SQL_output[resultset_pos].emailamigo;
    printf("email: %s \n",SQL_output[resultset_pos].emailamigo);
    strcpy(email_amigo,SQL_output[resultset_pos].emailamigo);
    printf("1 \n");
    strcat(email_amigo,"-");
    printf("2 \n");
    strcat(datos,email_amigo);
    printf("3 \n");
  }
EXEC SQL CLOSE RESULT_SET;


return datos;
}
